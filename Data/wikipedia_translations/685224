Gölge haritalama
Gölge haritalama veya projektif gölgeleme gölgeler 3D bilgisayar grafikleri ilave edildiği bir süreçtir. Bu kavram "kavisli yüzeylerde kavisli gölgeler Döküm" başlıklı bir yazıda, 1978 yılında Lance Williams tarafından tanıtıldı. O zamandan beri, birçok konsol ve PC oyunlarında önceden işlenen sahneler ve gerçek zamanlı sahnelerde ikisi de kullanılır olmuştur.
Gölge bir doku biçiminde depolanmış olan bir Z-tampon veya ışık kaynağının bakış "derinliği" görüntü ile karşılaştırarak, bir pikselin ışık kaynağından görünür olup olmadığını test tarafından oluşturulur.
Bir gölge ve gölge haritası ilkesi.
Eğer bir ışık kaynağından dışarı baktı ise, gördüğünüz tüm nesneleri ışığında görünür. Bu nesnelerin arkasına bir şey, ancak, gölge olacaktır. Bu gölge harita oluşturmak için kullanılan temel ilkedir. ışığın görünümü gördüğü her yüzeyin derinliğini (gölge harita) depolanması, oluşturulur. Sonraki düzenli sahne (oldukça göze daha ışık tarafından görülüyor sanki) bu derinlik haritası çizilmiş her noktanın derinliği karşılaştırarak oluşturulur.
Bu teknik gölge hacimleri daha az doğrudur, ancak gölge haritası gerçek zamanlı uygulamalar daha uygun olabilir, bu nedenle belirli bir uygulama ya tekniği için gerekli ve ne kadar dolgu süresi bağlı daha hızlı bir alternatif olabilir. Buna ek olarak, gölge haritaları ek bir şablon tamponu kullanılması gerekmez, ve yumuşak bir kenar ile gölgeler üretmek için modifiye edilebilir. Gölge hacimleri aksine, bir gölge haritası doğruluğu kendi kararı ile sınırlıdır.
Algoritma genel bakış.
Gölgeli bir sahneyi Rendering iki büyük çizim adımları içerir. İlk gölge haritası kendisi üretir ve ikinci sahne uygular. Uygulama (ve ışıklar sayısı) bağlı olarak, bu iki veya daha fazla çekme geçişinin gerektirebilir.
Gölge haritası oluşturuluyor.
İlk adım bakış ışığın açısından sahneyi oluşturur. Bir nokta ışık kaynağı için, görünüm perspektif projeksiyon kadar geniş etki istenen açı (o kare spot bir tür olacaktır) olmalıdır. Bir izdüşümleri kullanılmalıdır yönlü ışık (Güneş'ten o örn) için.
Bu render itibaren, derinlik tamponu ayıklanır ve kaydedilir. Sadece derinlik bilgisi ile ilgili olduğundan, çizim zamandan tasarruf etmek için, bu işleme ilişkin tüm aydınlatma ve doku hesaplamaları renk tamponlar güncellenmesi önlemek ve devre dışı bırakmak için yaygındır. Bu derinlik haritası, genellikle grafik belleğiyle bir doku olarak saklanır.
Bu derinlik haritası ışık ya da sahnede nesneler ya değişiklikler vardır her zaman güncelleştirilmesi gerekir, ancak bu o burada sadece görüntüleme kamera hareketleri gibi diğer durumlarda, yeniden kullanılabilir. (Birden ışıklar varsa, ayrı bir derinlik haritası, her ışık için kullanılmalıdır.)
Birçok uygulamalarda o haritayı yeniden çizmek için gereken zaman bazı kurtarmak için gölge haritasına sahnedeki nesnelerin yalnızca bir alt kümesini işlemek için pratiktir. Ayrıca, ışıktan uzak nesneleri kaydırır ofset bir derinlik derinlik haritası değeri çizilmiş olması bir yüzeyin derinliğine yakın dikiş sorunlarını çözmek amacıyla gölge haritası oluşturma tatbik edilebilir (yani, gölge döküm yüzeyi ) bir sonraki aşamada. Alternatif olarak, ön yüzleri itlaf ve sadece bazen benzer bir sonuç için kullanılan gölge haritası nesnelerin arkasını render.
Sahneyi gölgeleme.
İkinci adım gölge haritası uygulayarak, her zamanki kamera açısından sahneyi çekmektir. Bu süreç, ilk ışıktan görüldüğü gibi nesnenin koordinatlarını bulmak için, üç ana bileşeni vardır, ikinci o derinlik haritası karşı koordine ve nihayet, bir zamanlar başarılı, nesne ya çizilmelidir karşılaştırır testtir shadow veya ışık.
Işık alan koordine eder.
Derinlik haritası karşı bir noktayı test etmek için, sahne koordinatları konumu ışığıyla görüldüğü gibi eşdeğer pozisyona dönüştü gerekir. Bu matris çarpımı tarafından gerçekleştirilir. Ekrandaki nesnenin konumu koordinat dönüşümü zamanki tarafından belirlenir, ancak koordinat ikinci seti hafif alanda nesneyi bulmak için oluşturulmalıdır.
dünyayı dönüştürmek için kullanılan matris (OpenGL altında modelview ve projeksiyon matrisleri ürünüdür) birinci aşamada gölge haritayı oluşturmak için kullanılan aynıdır koordinatları ışığın görüntüleme içine koordinatları. Bu, her bileşen ("x", "y", ya da "z") arasında kalan hangi bir perspektif bölümü ("3D projeksiyon bakın") "normalize aygıt koordinatları" olmak, ihtiyaç homojen koordinatlar kümesi üretecek -1 ve 1 (ışık görünümünden görülebilir ise). (Örneğin OpenGL ve Direct3D gibi) pek çok uygulamaları olan -1 0 1 değerleri 1, derinlik haritası (doku haritası) arama için daha normal koordinatlar hangi haritaya ek bir "ölçek ve önyargı" matris çarpma gerektirir. Bu ölçeklendirme perspektif bölünmeden önce yapılabilir ve kolayca takip o matrisi çarpılarak önceki dönüşüm hesaplama içine katlanır:
FORMULA_1
Bir shader veya diğer grafik donanım uzantılı yapılırsa, bu dönüşüm genellikle tepe seviyesinde uygulanır ve oluşturulan değer diğer köşe arasına enterpolasyonlanan ve fragmanı seviyesine geçti.
Derinlik haritası testi.
Işık uzay koordinatları, "x" ve bulunduktan sonra "y" değerler genellikle derinlik haritası doku bir konuma gelmektedir ve "z" değeri şimdi derinlik haritası karşı test edilebilir ilişkili derinlik, karşılık .
"Z" değeri, uygun derinlik haritası saklanan değere ("x", "y") konum büyükse, nesne tıkayıcı nesnenin arkasındaki olarak kabul edilir ve bir "başarısızlık" olarak işaretlenmiş olmalıdır çizim işlemi tarafından gölgesinde çizilecek. Aksi takdirde çizilmelidir yaktı
("X", "y") konum derinlik haritası dışına düşerse, programcı ya yüzey yanar veya varsayılan gölgeli gerektiğini karar vermelidir (genellikle yanar).
Bir shader uygulamasında, bu test fragmanı düzeyinde bitmiş olacaktır. Ayrıca, bakım donanımı tarafından kullanılmak üzere doku haritası depolama türünü seçerken alınması gereken: enterpolasyon yapılabilir olamaz eğer, gölge keskin tırtıklı kenar (daha gölge haritası çözünürlükte azaltılabilir bir etkiye sahip görünecektir ).
Bu (gölge kenarına yakınlığı dayanarak) değerleri bir dizi kullanarak yumuşak bir kenar ile gölgeler üretmek için derinlik haritası testini değiştirmek yerine sadece başarılı ya da başarısız mümkündür.
Gölge haritalama tekniği de bir projektör etkisini taklit, yanan bölgelere üzerine bir doku çizmek için modifiye edilebilir. captioned Yukarıdaki resim, "sahneye öngörülen derinlik haritasının görselleştirme" Böyle bir sürecin bir örnektir.
Sahneyi çizimi.
Gölgeler ile sahne Çizim birkaç farklı şekilde yapılabilir. Programlanabilir shader varsa, derinlik haritası testi (gölge haritası oluşturmak için bir başlangıç ​​önceki geçtikten sonra) tek geçişte sahneyi çizim, sonucuna göre sadece gölgesinde nesneyi çeken bir parça gölgelendirici tarafından gerçekleştirilen ya da ışıklı olabilir .
Shader mevcut değilse, derinlik haritası testi genellikle genellikle iki aydınlatma modelleri arasında bir seçim (yaktı ve gölgeli) izin ve daha fazla işleme geçer gerektirmeyen (örneğin, "GL_ARB_shadow" gibi) bazı donanım uzantısı tarafından yapılmalıdır:
Bu makaledeki örnek resimler iki paso gölge haritası sürecini gerçekleştirmek için OpenGL uzantısı "GL_ARB_shadow_ambient" kullanılmıştır.
Gölge haritası gerçek zamanlı uygulamaları.
Gerçek zamanlı gölge haritalama önemli dezavantajlarından biri, gölge haritasının büyüklüğü ve derinliği son gölgeler kalitesini belirler olmasıdır. Bu aliasing veya gölge süreklilik glitches olarak genellikle görülebilir. Bu sınırlamanın üstesinden gelmek için basit bir yolu gölge harita boyutunu artırmak için, ama nedeniyle hafıza, hesaplama veya donanım kısıtlamaları, bu her zaman mümkün değildir. Gerçek zamanlı gölge haritalama için yaygın olarak kullanılan teknikler bu sınırlama aşmak için geliştirilmiştir. Bunlar Kaskad Gölge haritaları Trapez Gölge haritaları Işık Uzay Perspektif Gölge haritalar veya Paralel-Bölünmüş Gölge haritalar bulunmaktadır.
Ayrıca önemli oluşturulan gölge, serbest aliasing bile her zaman arzu edilmez, sabit kenarları olması. Gerçek dünya, yumuşak gölgeler taklit etmek için, çeşitli çözümler yumuşak kenar veya oluştururken standart olmayan derinlik gölge haritaları taklit etmek anlamına geometri üreten, ya gölge harita üzerinde birkaç aramaları yaparak geliştirilmiştir. Bunların önemli örnekler yüzdesi Closer Filtreleme, Smoothies ve Varyans Gölge haritalardır.

LR ayrıştırıcı
Bilgisayar bilimi, LR ayrıştırıcılar verimli garantili lineer zamanda deterministik bağlam-bağımsız diller idare aşağıdan yukarıya ayrıştırıcıları bir türüdür. LALR ayrıştırıcıları ve SLR ayrıştırıcıları LR ayrıştırıcıları ortak varyantları vardır. LR ayrıştırıcılar genellikle mekanik bir ayrıştırıcı jeneratör aracı tarafından dil için resmi bir dilbilgisi oluşturulur. Onlar çok yaygın üretilen ayrıştırıcıları diğer türlü daha fazla bilgisayar dilleri, işlenmesi için kullanılır.
isim LR bir kısaltmadır. L ayrıştırıcı yedekleme olmadan tek yönde giriş metni okur demektir; Bu yönde genellikle tam giriş dosyasının hatları üzerinden altına her satırın içinde sağa ve üst Soldan edilir. (Bu en ayrıştırıcıları için geçerlidir.) R ayrıştırıcı bir ters sağdaki türetme üretir demektir; Bir aşağıdan yukarıya ayrıştırma, yukarıdan aşağıya bir ad-hoc parse ayrıştırmak ya da LL değildir. isim LR sıklıkla ("k") LR (1) ya da bazen LR gibi, sayısal niteleyici tarafından takip edilir. Yararlar veya tahmin önlemek için, LR ayrıştırıcı önceki semboller ayrıştırmak nasıl karar vermeden önce "k" lookahead giriş simgelerinin önde peek izin verilir. Genellikle "k" 1 ve sözü değildir. isim LR genellikle SLR ve LALR gibi diğer elemeleri önce gelmelidir.
LR ayrıştırıcılar deterministik olduğu; Onlar lineer zamanda varsayımları veya backtracking olmadan tek bir doğru ayrıştırma, üretirler. Bu bilgisayar dilleri için idealdir. Ama LR ayrıştırıcılar daha esnek ama yavaş yöntemlere ihtiyaç insan dilleri için uygun değildir. Birden fazla ayrıştırır sarfınazar veya verim Diğer ayrıştırıcı yöntemleri (CYK algoritması, Earley ayrıştırıcı ve GLR ayrıştırıcı) O alabilir ("n" 2), O ("n" 3) ya da kötü tahmin bile üstel zaman.
L, R, ve k yukarıdaki özellikleri aslında öncelik ayrıştırıcıları dahil olmak üzere tüm shift-azaltmak ayrıştırıcıları tarafından paylaşılır. Ama Kongre tarafından, LR adı Donald Knuth tarafından icat ayrıştırma şeklinde duruyor, ve (örneğin Operatör-öncelik çözümleyici için) daha önce, daha az güçlü öncelik yöntemlerini dışlar.
LR ayrıştırıcılar öncelik ayrıştırıcıları veya yukarıdan aşağıya LL ayrıştırma daha diller ve gramerler daha büyük bir dizi işleyebilir. O bulduğu ne taahhütte bulunmadan önce bazı gramer desen bütün bir örneğini gördü kadar LR ayrıştırıcı bekler olmasıdır. Bir LL ayrıştırıcı sadece o desen soldaki giriş sembolü gördü olduğunda, karar ya da çok erken görüyor ne olduğunu tahmin etmek vardır. LR de hata raporlama daha iyidir. Bu mümkün olduğunca erken girdi akışında sözdizimi hataları algılar.
Genel Bakış.
Örnek A * 2 + 1 Aşağıdan yukarıya ayrıştırma ağacı.
Bir LR ayrıştırıcı tarar ve bir giriş metni ayrıştırır ileri metnin üzerinden geçmek. ayrıştırıcı, aşamalı dibe ayrıştırma ağaca kurar ve tahmin veya backtracking olmadan, soldan sağa. Bu geçişte her noktada, çözümleyici alt ağaçlar ya da zaten çözümlenen olan giriş metninin cümleleri bir listesini birikmiş. Ayrıştırıcı henüz bunları bir araya getirecektir sözdizimi desen sağ ucunu ulaşamamıştır çünkü bu alt ağaçlar henüz bir araya değildir.
Örnek parse adım 6, sadece "A * 2" eksik, ayrıştırıldı edilmiştir. Sadece Çözümleme ağacının gölgeli sol alt köşesi var. Yukarıdaki 7 numaralı ve ayrıştırma ağaç düğümleri hiçbiri henüz mevcut. Düğümler 3, 4, ve 6 değişken A, operatör *, sırasıyla 2 numaralı, için izole alt ağaçlar kökleri vardır. Bu üç kök düğümleri geçici bir ayrıştırma yığınına tutulur. giriş akışı kalan çözümlenmemiş kısmı "+ 1" dir.
Shift ve eylemleri azaltır.
Diğer shift-azaltmak ayrıştırıcıları olduğu gibi, bir LR ayrıştırıcı Shift bazı adımlar kombinasyonunu yapıyor ve adımları azaltın çalışır.
Giriş hiçbir sözdizimi hatalar varsa, çözümleyici girdi tüm tüketilen kadar bu adımlara devam eder ve ayrıştırma ağaçlar bütün bütün yasal girişini simgeleyen bir tek ağaca düşürülmüştür.
LR ayrıştırıcılar onlar azaltmak için ne zaman karar nasıl diğer shift-azaltmak ayrıştırıcıları farklı ve ne kadar benzer sonlar ile kurallar arasındaki almak için. Ama nihai kararlar ve vardiya sırası veya azaltmak adımlar aynıdır.
LR çözümleyici verimlilik Çok deterministik olmaktan uzaktır. Tahmin önlemek için, LR ayrıştırıcı genellikle önceden taranmış sembolleri ile ne yapacağınıza karar vermeden önce, önde (sağa) aşağıdaki taranan sembol bakar. sözcük tarayıcı, bir veya daha fazla simge öncesinde çözümleyici çalışır. lookahead sembolleri ayrıştırma kararı için 'sağ bağlam' vardır.
Aşağıdan yukarıya ayrıştırma yığını.
O taranır ve kombine yapı nedir işlemeden önce bazı yapının tüm parçaları ayrıştırıldı kadar diğer shift-azaltmak ayrıştırıcıları gibi, bir LR ayrıştırıcı tembel bekler. Çözümleyici sonra yerine başka herhangi bir bekleme kombinasyonu hemen etki eder. Ayrıştırma ağacı örnekte, ifade A Değerine azaltılmış olur ve sonra adımlarda 1-3 Ürünleri en kısa sürede * görüldüğü lookahead gibi herhangi bir bekleme yerine daha sonra Çözümleme ağacının bu parçaların organize etmek. A işlemek için nasıl kararlar daha sonra sağında görünür şeyler dikkate almadan, sadece ayrıştırıcı ve tarayıcı zaten gördüklerimi dayanmaktadır.
İndirimler hemen ileri yönlü sembolü solunda, en son çözümlenen şeyler yeniden. Yani zaten çözümlenen şeylerin listesini bir yığın gibi davranır. Bu ayrıştırma yığını sağa büyür. yığının tabanı veya alt solda ve en soldaki, en eski ayrıştırma fragmanı tutar. Her indirgeme adım sadece en sağdaki, en yeni ayrıştırma parçaları üzerinde hareket eder. (Bu birikmiş ayrıştırma yığını çok yukarıdan aşağıya ayrıştırıcıları tarafından kullanılan akıllı, sola büyüyen ayrıştırma yığınının benzemez.)
Aşağıdan yukarıya örneği A * 2 + 1 adımları ayrıştırmak.
Adım 6 Birden parçaları ile bir dilbilgisi kuralı geçerlidir:
Bu çözümlü ifadeler "... Ürünler * Değer" holding yığını üst eşleşir. azaltmak adım daha geniş Ürünler Burada, kuralın sol taraftaki sembolü ile "Ürünler değer *" kuralın sağ tarafta bu örneğini değiştirir. Ayrıştırıcı tam ayrıştırmak ağaçları oluşturur, iç Ürünleri, *, ve Değer üç ağaç ürünleri için yeni bir ağaç kökü ile birleştirilir. Aksi takdirde, iç Ürünler ve Değeri anlamsal ayrıntıları daha sonra bazı derleyici geçmek çıktı, ya da kombine ve yeni ürünler sembol kaydedilir.
LR örneği A * 2 + 1 adımları ayrıştırmak.
LR ayrıştırıcıları ise, vardiya ve kararlar potansiyel daha önce tek bir üstteki yığın sembolü değil, sadece ayrıştırıldı olmuştur her şeyin tüm yığınına dayanmaktadır azaltmak. Bir unclever şekilde yapılırsa, bu uzun girişler için ve yavaş yavaş olsun çok yavaş ayrıştırıcıları neden olabilir. LR ayrıştırıcılar (0) çözümleyici durumu LR adında tek bir numaraya ilgili tüm sol bağlam bilgileri özetleyerek, sabit hızla yapıyoruz. Her dilbilgisi ve LR analiz yöntemi için, bu tür durumların bir sabit (sonlu) numarası vardır. Zaten çözümlü semboller tutan yanı sıra, ayrıştırma yığını da bu noktaya kadar her şeyi ulaştığı devlet numaralarını hatırlar.
Her ayrıştırmak adımda, tüm giriş metin önceden çözümlenen cümleleri yığını ve bir akım ileri yönlü sembolü ve kalan Taranmamış metne ayrılmıştır. çözümleyici sonraki eylem mevcut LR (0) (sağdaki yığın üzerinde) ve ileri yönlü sembolü tarafından belirlenir. Aşağıdaki adımlarda, tüm siyah ayrıntılar tam ayrıştırıcıları-azaltmak vardiya olmayan diğer LR aynıdır. LR ayrıştırıcı yığınları yığının ve hangi sözdizimi olanakları sonraki beklemek sol geçen ay siyah ifadeler özetleme, mor devlet bilgilerini ekleyin. Bir LR çözümleyici kullanıcıları genellikle durum bilgisi yok sayabilirsiniz. Bu devletler daha sonraki bir bölümde açıklanmıştır.
İlk aşamada 0 anda, giriş akışı "A 2 + 1 *" bölünür
ayrıştırma yığını 0. devlet 0 lookahead "id" gördüğünde, yığının üzerine bu "id" shift ve devlete 9 sonraki giriş sembolü * ve avans tarama bilen sadece ilk devlet tutarak başlar.
4. adımda anda, toplam giriş akımı "A 2 + 1 *" Şu anda ayrılmıştır
yığılmış cümleleri tekabül devletler 0, 4, ve 5. olan yığını akım, sağdaki durum devlet 5 olarak yığının üzerine lookahead "int", bu "int" diye kaydırmaya bilir gördüğünde devlet 5. onun Kendi ifade ve devletin 8 sonraki giriş sembolü + ve avans tarayın.
Adım 12 at, giriş akışı tüm tüketilen ama sadece kısmen organize edilmiştir. mevcut durumu durumu 3 tamamlanan gramer kuralı uygulamak için lookahead "EOF", bildiği gördüğünde 3'tür
Bir kere içine Toplamlar, + ve Ürünleri yığını'nın sağdaki üç ifadeler birleştirerek. Devletin 3 kendisi bir sonraki devlet ne olması gerektiğini bilmiyor. Bu azaltıldığı sadece ifade solunda, duruma geri 0 giderek bulunmuştur. Devlet 0 Toplamlar bu yeni tamamlanan örneği gördüğünde, 1 (tekrar) devlet ilerler. Bunun yerine sadece mevcut durumu tutma, yığın üzerinde tutulur neden eski devletlerin bu danışmanlık olduğunu.
Örnek A * 2 + 1 için dilbilgisi.
LR ayrıştırıcılar resmen desen bir dizi olarak giriş dilinin sözdizimi tanımlayan bir gramer inşa edilir. dilbilgisi gibi sayıların büyüklüğü veya tüm programı bağlamında isimleri ve tanımları tutarlı kullanımı gibi tüm dil kurallarını kapsamaz. LR ayrıştırıcılar sadece semboller yerel desenleri ile uğraşan bir bağlam serbest dilbilgisi kullanın.
Burada kullanılan örnek dilbilgisi Java ya da C dilinde küçük bir alt kümesidir:
gramer terminal semboller sözlü tarayıcı tarafından giriş akışı bulunan çoklu karakter sembolleri ya da 'belirteçleri' vardır. İşte bu + * içerir ve giriş dosyanın sonuna sabit herhangi bir tamsayı için "int" ve herhangi bir tanımlayıcı adı "id" ve "eof". dilbilgisi "int" değerler veya "id" yazımlar ne umursamıyor, ne de boşlukları veya satır sonları umurumda değil. dilbilgisi, bu uç sembolleri kullanır ancak bunları tanımlamaz. Onlar her zaman Çözümleme ağacının (alt gür sonunda) yaprak düğümleri vardır.
Toplamlar gibi büyük harfli terimler nonterminal sembollerdir. Bunlar dilde kavram ya da desenler adlarıdır. Bunlar dilbilgisi tanımlanan ve giriş akışı kendilerini ortaya asla. Onlar her zaman Çözümleme ağacının (alt üstü) iç düğümleri vardır. Onlar sadece bazı dilbilgisi kuralı uygulayarak çözümleyici bir sonucu olarak gerçekleşir. Bazı terminaller iki veya daha fazla kurallara tanımlanır; Bu alternatif modeller vardır. Kurallar "özyinelemeli" olarak adlandırılan, hangi kendilerine geri başvurabilirsiniz. Bu dilbilgisi tekrarlanan matematik operatörleri işlemek için özyinelemeli kuralları kullanır. Tam diller için Gramerleri listeleri, parantezli ifadeler ve iç içe ifadeleri işlemek için özyinelemeli kuralları kullanabilirsiniz.
Herhangi Verilen bilgisayar dili farklı gramerler tarafından tarif edilebilir. Bir LR (1) ayrıştırıcı birçok ancak tüm ortak gramerler işleyebilir. O LR (1) ayrıştırma ve jeneratör aracı sınırlamaları uyacak şekilde elle dilbilgisi değiştirmek genellikle mümkündür.
Bir LR çözümleyici için dilbilgisi kesin kendisi olmalı, ya da kravat kıran öncelik kurallarına göre arttırılması gerekmektedir. Bu / O, örneğin eylemleri azaltmak tek anlamı ile benzersiz Çözümleme ağacının sonuçlanan dilin, ve vardiya eşsiz dizisinin belirli bir yasal örnek dilbilgisi uygulamak için tek bir doğru yolu var demektir. LR ayrıştırma kelimelerin etkileşimine bağlıdır belirsiz gramerler insan dilleri için yararlı bir teknik değildir. İnsan dilleri daha iyi Genelleştirilmiş LR çözümleyici, Earley ayrıştırıcı, veya aynı anda tek geçişte tüm olası ayrıştırma ağaçlarını hesaplayabiliriz CYK algoritması gibi ayrıştırıcıları tarafından işlenir.
Örnek dilbilgisi için tabloya ayrıştırın.
Çoğu LR ayrıştırıcılar tablo sürülür. çözümleyici program kodu, tüm gramerler ve diller için aynı basit jenerik döngü. dilbilgisi ve sözdizimsel etkileri bilgi ayrıştırma tabloları denilen değişmeyen veri tabloları içine kodlanır. Bir tablodaki Girişler çözümleyici devlet ve ileri yönlü sembolü her türlü hukuki kombinasyonu için, vardiya veya azaltmak (ve hangi dilbilgisi kuralı) tarafından verilip göstermektedir. Ayrıştırma tabloları da sonraki devlet, verilen sadece bir mevcut durumu ve gelecek sembol hesaplamak için nasıl söyle.
Ayrıştırma tabloları dilbilgisi çok daha büyüktür. LR tabloları doğru büyük gramerler için elle hesaplamak zordur. Böylece mekanik Bison gibi bazı ayrıştırıcı jeneratör aracı tarafından dilbilgisi türetilmiştir.
Devletler ve ayrıştırma tablosu oluşturulur nasıl bağlı ortaya çıkan ayrıştırıcı ya bir SLR (basit LR) çözümleyici, LALR (ileriye dönük LR) çözümleyici, ya da kurallı LR ayrıştırıcı denir. LALR ayrıştırıcıları SLR ayrıştırıcıları daha dilbilgisi anlaştım. Kurallı LR ayrıştırıcılar daha dilbilgisi ele, ama daha çok devletler ve çok daha büyük tabloları kullanın. örnek dilbilgisi SLR olduğunu.
LR ayrıştırma tabloları iki boyutludur. Her akım LR (0) çözümleyici devlet kendi satır vardır. Her olası bir sonraki sembol kendi sütun vardır. Devlet ve sonraki sembolün bazı kombinasyonlar geçerli giriş akışları için mümkün değildir. Bu boş hücreler sözdizimi hata iletileri tetikler.
Tablonun Eylem sol yarısı lookahead terminali sembollerin sütun vardır. Bu hücreler bir sonraki ayrıştırıcı eylem (devlet "n" kadar) vardiya olup olmadığını belirlemek, ya da (dilbilgisi kuralı rn) tarafından azaltır.
Tablonun Goto sağ yarısı nonterminal sembollerin sütun vardır. Bu hücreler miktar azalma en Left Hand Side o sembolün beklenen yeni bir örneğini yarattı sonra, ilerlemek için hangi devlet göstermektedir. Bu kayma eylem gibi ama nonterminal içindir; ileri yönlü Terminal sembolü değişmez.
ayrıştırıcı jeneratör tarafından dışarı amele tablo sütun "Cari Kuralları", her devlet için anlamı ve sözdizimi olanakları belgelemektedir. Bu zaman ayrıştırma kullanılan gerçek tablolar dahil değildir. Çözümleyici, bazı kısmen kabul gramer kuralları dahilinde, şimdi nerede (pembe nokta) işareti gösterir. solundaki şeyler çözümlü edilmiş ve sağa şeyler yakında bekleniyor. Ayrıştırıcı henüz tek bir kural aşağı olanaklarını daralmış olmadığı takdirde bir devlet birkaç tür akım kuralları vardır.
Yukarıdaki durumda 2'de, ayrıştırıcı sadece bulmuştur ve kaymıştır-dilbilgisi kuralı +
Bir sonraki beklenen ifade Ürünleri olduğunu. Ürünler Terminal semboller "int" ya da "id" ile başlar. Lookahead olanların ya ise, çözümleyici bunları değiştirir ve sırasıyla 8 veya 9, devlet ilerler. Bir Ürünleri bulunamadı edildiğinde, ayrıştırıcı summands tam listesini birikir ve kural r0 sonunu bulmak için 3. devlet ilerler. A Ürünler ayrıca nonterminal değer ile başlayabilirsiniz. Başka lookahead veya nonterminal için, çözümleyici bir sözdizimi hatası duyurdu.
Devlet 3'te, ayrıştırıcı sadece iki olası dilbilgisi kuralları olabilecek ürünler ifade, bulmuş:
r1 ve r3 arasındaki seçim hemen önce cümleleri de geriye bakarak karar alınamaz. ayrıştırıcı ne anlatmak için lookahead sembolü kontrol etmek zorundadır. Lookahead * ise, kural 3'te, yani ayrıştırıcı kaymalar * ve ileri yönlü "eof" ise 5. devlet gelişmeler, bu kural 1 ve kural 0 sonunda, yani çözümleyici yapılır .
Yukarıdaki durumda 9, tüm boş olmayan, hata olmayan hücreler aynı redüksiyon R6 içindir. Bazı ayrıştırıcıları bu basit vakalarda ileri yönlü sembolü kontrol etmiyor zaman ve masa alanından tasarruf. Sözdizimi hataları sonra bazı zararsız indirimlerin ardından, ama yine de bir sonraki vardiya eylemi veya çözümleyici kararından önce, biraz sonra tespit edilir.
Bireysel tablo hücreleri, aksi takdirde ayrıştırıcı varsayımları ve geriye dönüş ile nondeterministic olurdu, çoklu, alternatif eylemler tutmak gerekir. Dilbilgisi LR (1) değilse, bazı hücreler birden dilbilgisi kuralları arasındaki çatışmaları azaltmak / olası bir vardiya eylemi arasındaki çatışmaları azaltmak ve eylem azaltmak veya azaltmak / vardiya olacak. LR (k) ayrıştırıcıları ilk ötesinde ek ileri yönlü sembolleri kontrol ederek bu çatışmaları (mümkünse) çözmek.
LR ayrıştırıcı döngü.
LR ayrıştırıcı sadece başlangıç ​​durumuna 0 içeren neredeyse boş ayrıştırma yığını ile başlar ve giriş streamin taranan ilk sembolü tutan lookahead ile. yapılabilir veya bir sözdizimi hatası sıkışmış kadar ayrıştırıcı sonra aşağıdaki döngü adımı tekrarlar:
ayrıştırma yığını üstteki devlet bazı devlet "s" olduğunu ve mevcut ileri yönlü bazı uç sembol "t" dir. Satır "s" ve Lookahead Eylem tablonun sütun "t" den sonraki çözümleyici eylemi Look up. Bu eylem ya Shift, azaltın, Bitti, ya da hata olduğu:
Not: LR ayrıştırıcı yığını genellikle mağaza sadece LR (0) otomat devletlerin dilbilgisi sembolleri otomat içinde (bunların elde edilebilir gibi bazı devlet tüm giriş geçişleri bu ilişkili sembol aynı sembol ile işaretlenmiştir devlet). Üstelik bu sembolleri neredeyse devlet ayrıştırma kararını verirken tüm bu konularda olduğu gibi hiç ihtiyaç vardır.
LR jeneratör analizi.
Makalenin bu bölümünde LR ayrıştırıcı jeneratör çoğu kullanıcı tarafından atlanabilir.
LR devletler.
Örnek ayrıştırma tablodaki State 2 kısmen çözümlenen kural için
Bu ayrıştırıcı + büyük Toplamlar ararken sonra Toplamlar görerek, buraya nasıl gösterir. işaretleyici kuralı başında ötesine ilerlemiştir. Aynı zamanda ayrıştırıcı sonunda yanındaki bir tam Ürünleri bularak, kuralı tamamlamak için beklediğini gösterir. Ama daha detay bu Ürünlerin tüm parçaları ayrıştırmak nasıl ihtiyaç vardır.
bir devlet için kısmen çözümlü kurallar onun "çekirdek LR (0) öğeler" olarak adlandırılır. ayrıştırıcı jeneratör beklenen Ürünleri kurma olası tüm sonraki adımlar için ek kurallar veya öğeleri ekler:
Işaretleyici bu eklenen kuralların her birinin başında olduğunu unutmayın; Ayrıştırıcı henüz teyit ve bunların herhangi bir bölümünü ayrıştırıldı değil. Bu ek öğeler çekirdek öğeler "kapatma" denir. Hemen aşağıdaki her nonterminal sembolü için, jeneratör o sembolü tanımlayan kurallar ekler. Bu, daha fazla belirteçler, ve muhtemelen farklı takipçisi sembolleri ekler. Tüm takipçi sembolleri genişletilmiştir kadar bu kapatma işlemi devam eder. devlet 2 takipçisi Sabit simgeler Ürünleri ile başlar. Değeri, daha sonra bir kapak ile ilave edilir. takipçi terminalleri "int" ve "id" dir.
Çekirdek ve kapatma öğeleri bir araya gelecek devletler ve tam sözcük mevcut durumundan devam etmek mümkün olan tüm yasal yolları gösterir. Bir takipçisi sembol sadece bir öğe görünüyorsa, bu işaretleyici gelişmiş olan tek çekirdek öğesi içeren bir sonraki duruma yol açar. Yani "int" çekirdek ile bir sonraki duruma 8 yol açar
Aynı takipçisi sembolü çeşitli öğeleri görünüyorsa, çözümleyici burada henüz uygulandığı kural söyleyemem. Yani sembol işaretleyici ileri tekrar birlikte kalan bütün olasılıkları gösteren bir sonraki duruma yol açar. Ürünler, R1 ve R3 'ün her ikisi de görünür. Yani Ürünler çekirdekli sonraki duruma 4 yol açar
Çözümleyici tek Ürünler gördü, eğer bir deyişle, bu, o bitmiş olabilir, ya da hala birlikte çoğalmaya daha fazla şeyler olabilir anlamına gelir. Tüm temel öğeleri işaretleyici önceki aynı sembolü olduğunu unutmayın; Bu duruma tüm geçişler aynı sembolle her zaman vardır.
Bazı geçişler zaten numaralandırılmış olan çekirdek ve devletler olacak. Diğer geçişler yeni devletlere yol açar. Jeneratör gramer hedefi kuralı ile başlar. Oradan tüm gerekli devletler kadar bilinen durumları ve geçişler keşfetmek bulundu tutar.
Onlar, "k" = 0 Bir lookahead kullanmak hiçbir lookahead yani çünkü bu devletler "LR (0)" devletler olarak adlandırılır. Sembol kaydırılır zaman giriş simgelerinin tek kontrol oluşur. indirimleri için lookaheads ve kontrolü, ayrıştırma tablo tarafından ayrı yapmadı numaralandırılmış kendileri devletler tarafından bir.
Sonlu durum makinesi.
ayrıştırma tablo olası tüm LR (0) devletler ve onların geçişlerini açıklar. Onlar sonlu durum makinesi (FSM) oluştururlar. Bir FSM bir yığın kullanmadan, basit unnested dilleri ayrıştırmak için basit bir motordur. Bu LR uygulamasında, FSM değiştirilmiş "giriş dili" terminali ve nonterminal sembolleri hem sahiptir ve tam LR ayrıştırma herhangi kısmen çözümlenen yığın anlık kapsar.
Ayrıştırma Adımlar Örnek adım 5 hatırlayın:
ayrıştırma yığını durumuna 4, başlangıç ​​durumuna 0 devlet geçişler bir dizi gösterir ve ayrıştırma yığını daha sonra 5 ve mevcut durumu 8. semboller, bu geçişler için vardiya veya Goto sembollerdir. Bu görmek için başka bir yolu, sonlu durum makinesi (henüz başka yığın kullanmadan) stream "Ürünler *" int "+ 1" tarama ve sonraki azaltılmalıdır soldaki tam ifade bulmak olmasıdır. Ve bu gerçekten de işi!
Orijinal çözümlenmemiş dil yuvalama ve özyineleme vardır ve kesinlikle bir yığın bir analizörü gerektirdiğinde nasıl sadece FSM, bu yapabilirim? Hüner yığını üst solundaki her şey zaten tamamen indirgenmiş olmasıdır. Bu, tüm döngüler ortadan kaldırır ve bu cümleleri gelen yuvalama. FSM ifadelerinin tüm eski başlangıçlar görmezden ve bir sonraki tamamlanmış olabilir sadece yeni ifadeler izleyebilirsiniz. LR teoride bunun için belirsiz isim "canlı öneki" dir.
Ileriye bakan setleri.
devletler ve geçişler ayrıştırma tablonun vardiya eylemleri ve git eylemler için tüm gerekli bilgileri verir. Jeneratör ayrıca her eylem azaltmak için beklenen lookahead setleri hesaplamak gerekiyor.
SLR ayrıştırıcıları, bu lookahead setleri bireysel durumları ve geçişler dikkate almadan, dilbilgisi doğrudan belirlenir. Her nonterminal S, SLR jeneratör izler çalışır (S), hemen ayrıştırma tablosunda S. bazı oluşumunu takip edebilirsiniz tüm terminal semboller kümesi, S her azalma 1 (onun LR olarak Follow (S) kullanır ) set ileriye bakan. Böyle bir takip setleri de LL yukarıdan aşağıya ayrıştırıcıları için jeneratörler tarafından kullanılmaktadır. Hiçbir kayma / Takip SLR dilbilgisi denir setleri kullanırken çatışmaları azaltmak / azaltmak ya da azaltmak sahip bir dilbilgisi.
LALR ayrıştırıcıları SLR ayrıştırıcıları aynı devletler var, ama her devlet için gerekli minimum azaltma lookaheads çalışma dışarı bir daha karmaşık, daha hassas bir şekilde kullanın. Dilbilgisi ayrıntıları bağlı olarak, bu SLR ayrıştırıcı jeneratörler tarafından hesaplanan Takip set olarak aynı olduğu ortaya dönüşebilir ya da SLR lookaheads bir alt kümesi olduğu ortaya dönüşebilir. Bazı gramerler LALR ayrıştırıcı jeneratörleri için Tamam ama değil SLR çözümleyici jeneratörleri vardır. Dilbilgisi izleyin kümeleri kullanarak sahte shift / azaltmak / azaltmak ya da azaltmak çatışmaları olduğunda bu olur, ancak hiçbir çatışmalar LALR jeneratör tarafından hesaplanan kesin setleri kullanırken. gramer daha sonra LALR (1), ancak SLR olarak adlandırılır.
SLR veya LALR ayrıştırıcı yinelenen durumları sahip önler. Ama bu minimizasyon gerekli değildir ve bazen gereksiz ileri yönlü çatışmalar oluşturabilirsiniz. Kurallı LR ayrıştırıcılar çoğaltılamaz kullanın (ya da "bölünmüş") daha iyi bir nonterminal kullanımına sol ve sağ bağlam hatırlamak belirtiyor. Gramer sembolü S Her olay çözülmesine azaltma çatışmaları yardım etmek, kendi ileri yönlü seti ile bağımsız tedavi edilebilir. Bu birkaç dilbilgisi işler. Ne yazık ki, bu büyük ölçüde dilbilgisi tüm parçaları için yapılırsa ayrıştırma tabloları boyutunu büyütür. Bu devletler bölme de iki yaparak ya da daha fazla, bazı nonterminal kopyalarını adlı göre, herhangi bir SLR veya LALR ayrıştırıcı manuel ve seçici yapılabilir. Bir kanonik LR jeneratörün çatışma içermeyen ancak bir LALR jeneratör çatışmaları olan bir gramer (1) değil LALR (1), ve SLR LR denir.
SLR LALR ve kanonik LR ayrıştırıcılar aynı vardiya yapmak ve giriş akışı doğru dil olduğunda kararları azaltır. Girdi bir sözdizimi hatası varsa, LALR ayrıştırıcı kanonik LR ayrıştırıcı olur daha hatayı tespit önce bazı ek (zararsız) azalmalar yapabilirsiniz. Ve SLR ayrıştırıcı daha yapabilir. SLR ve LALR ayrıştırıcıları o devlet için de geçerlidir, asgari ileri yönlü sembollere cömert süperset yaklaşımı kullanılarak, çünkü bu olur.
Sözdizimi hatası kurtarma.
LR ayrıştırıcılar sadece yanındaki yerine beklenmedik kötü ileri yönlü sembolü ortaya çıkmış olabilirdi tüm terminal sembolleri numaralandırma tarafından, bir programda ilk sözdizimi hatası için biraz yardımcı hata mesajları üretebilir. Ama bu daha bağımsız hataları aramak için giriş programın kalan ayrıştırmak nasıl çözümleyici çalışmalarını yardımcı olmuyor. Çözümleyici İlk hatadan kötü kurtarır Eğer her şeyi yanlış ayrıştırmak ve yararsızdır sahte hata mesajlarının bir çağlayan üretmek için çok muhtemeldir.
Yacc ve bizon ayrıştırıcı jeneratörleri, ayrıştırıcı, şimdiki deyimi terk hatası çevreleyen bazı çözümlenen ifadeler ve ileri yönlü belirteçleri atmak ve noktalı virgül ya da parantez gibi bazı güvenilir deyimi düzeyinde sınırlayıcı de ayrıştırma yeniden eşitlemek için bir ad hoc mekanizması vardır. Bu genellikle programın geri kalanı bakmaya ayrıştırıcı ve derleyici izin verdiği için iyi çalışır.
Birçok sözdizimsel kodlama hataları basit yazım hataları ya da önemsiz sembolü eksiklikler bulunmaktadır. Bazı LR ayrıştırıcılar bu ortak durumları algılar ve otomatik tamir etmeye çalışmayınız. Ayrıştırıcı hatası noktasında her türlü tek sembol ekleme, silme veya ikamesi sıralar. Tamam çalıştı derleyici deneme görmek için her değişiklikten ile ayrıştırmak değil. (Bu normalde çözümleyici tarafından gereksiz ayrıştırma yığını ve giriş akışı, bir anlık görüntü geriye gidilmiştir gerektirir.) Bazı iyi tamir alınır. Bu çok yararlı bir hata mesajı verir ve iyi parse yeniden eşitler. Ancak, onarım kalıcı girdi dosyasını değiştirmek için yeterli güvenilir değildir. Sözdizimi hataları tamiri ayrıştırma tablolar ve açık bir veri yığını var (LR) gibi ayrıştırıcıları tutarlı yapmak için en kolay yoldur.
LR ayrıştırıcıları varyantları.
LR ayrıştırıcı jeneratör ayrıştırıcı devlet ve ileri yönlü sembolü her kombinasyonu için ne olacağını karar verir. Bu kararlar genellikle Dilbilgisi ve devlet-bağımsız bir jenerik ayrıştırıcı döngü sürücü salt okunur veri tabloları dönüşüyor. Ama aktif bir çözümleyici içine bu kararları çevirmek için başka yollar da vardır.
Bazı LR ayrıştırıcı jeneratörleri yerine bir ayrıştırma tablo daha, her devlet için ayrı uyarlanmış program kodu oluşturmak. Bu ayrıştırıcıları tablo odaklı ayrıştırıcıları jenerik ayrıştırıcı döngü birkaç kat daha hızlı çalıştırabilirsiniz. En hızlı ayrıştırıcıları kullanım assembler kodu oluşturdu.
Özyinelemeli çıkış ayrıştırıcı değişiklikte, açık ayrıştırma yığını yapısı da altprogram çağrıları tarafından kullanılan örtülü yığını tarafından değiştirilir. İndirimler birçok dilde beceriksiz değişmeze çağrıları, çeşitli düzeylerde sonlandırmak. Yani özyinelemeli çıkış ayrıştırıcıları özyinelemeli iniş ayrıştırıcıları daha el değiştirmeye, genellikle yavaş daha az belirgin ve daha zordur.
Başka bir varyasyon gibi Prolog gibi non-usul dillerde desen eşleştirme kurallarına göre ayrıştırma tablosunu değiştirir.
GLR Genelleştirilmiş LR ayrıştırıcılar giriş metninin tüm olası ayrıştırır, sadece tek bir doğru parse bulmak için LR aşağıdan yukarıya tekniklerini kullanın. Bu durum, insan diller için kullanılanlar gibi belirsiz gramerleri için gereklidir. Birden geçerli ayrıştırma ağaçları yararlar olmaksızın, eş zamanlı olarak hesaplanır. Yeşil Hat Tüzüğünü kolayca çatışma içermeyen LALR (1) Dilbilgisi tarif edilmez bilgisayar dilleri için bazen yararlı olabilir.
Sol köşe ayrıştırıcıları alternatif dilbilgisi kurallarının sol ucunu tanımak için LR aşağıdan yukarıya tekniklerini kullanın. Alternatifleri tek bir olası kural aşağı daralmış edildiğinde, ayrıştırıcı o kuralın geri kalanını ayrıştırma için yukarıdan aşağıya LL (1) teknikleri geçer. LC ayrıştırıcıları LALR ayrıştırıcıları ve daha iyi hata teşhis daha küçük ayrıştırma tablolar var. Deterministik LC ayrıştırıcıları için yaygın olarak kullanılan jeneratörler vardır. Çoklu ayrıştırma LC ayrıştırıcıları çok büyük gramerler insan dil ile yardımcı olur.
Teorisi.
LR ayrıştırıcılar öncelik ayrıştırıcıları verimli bir genelleme olarak 1965 yılında Donald Knuth tarafından icat edildi. Knuth LR ayrıştırıcılar hala kötü durumda etkili olacağını mümkün olan en genel amaçlı ayrıştırıcıları olduklarını kanıtladı.
Dil etkin bir tek-geçiş ayrıştırıcı sağlayacak kadar makul Diğer bir deyişle, bir LR ("K") gramer tarif edilebilir. Ve bu gramer her zaman mekanik eşdeğer (ama büyük) LR (1) Dilbilgisi dönüşebilirler. Yani bir LR (1) ayrıştırma yöntemi herhangi bir makul bir dil işlemek için yeterince güçlü, teoride oldu. Uygulamada, birçok programlama dilleri için doğal dilbilgisi LR olmaya yakın (1).
Knuth tarafından açıklanan kanonik LR ayrıştırıcılar çok devletler ve o dönemin bilgisayarların sınırlı bellek için mümkün olamayacak kadar büyük olduğunu çok büyük ayrıştırma tablolar vardı. Frank DeRemer çok daha az devletleri ile SLR ve LALR ayrıştırıcıları icat ettiğinde LR ayrıştırma pratik oldu.
LR teorisi ve LR ayrıştırıcılar gramerler türetilmiştir nasıl (Aho ve Ullman) "Ayrıştırma, Çeviri ve Derleme, Cilt 1 Teorisi" bakın tam ayrıntılar için.
Earley ayrıştırıcıları, insan dilleri gibi muğlak gramerler için tüm olası ayrıştırır üreten görevine teknikleri ve LR ayrıştırıcıları gösterimini uygulanır.
LR ("k") gramerler tüm "k" ≥1 eşit üretimsel güce sahipken, LR davası (0) biraz farklıdır gramerler.
"L" hiçbir kelime "L" başka bir kelime düzgün bir öneki ise bir dil "L" "öneki özelliği" olduğu söylenir.
Ve sadece "L" öneki özelliği ile deterministik bağlam ücretsiz dil ise bir dil "L" Bir LR (0) gramer vardır.
Bunun bir sonucu olarak, bir dil "L" deterministik bağlam serbest olup olmadığını ve "L" $ "$", "L" 'nin alfabenin bir sembol değil, bir LR (0) gramer vardır sadece.
Ek örnek 1 + 1.
LR ayrıştırma Bu örnek hedefi sembol E aşağıdaki küçük gramer kullanır:
Aşağıdaki giriş ayrıştırmak için:
Eylem ve git tablolar.
Bu dilbilgisi görünüm için iki LR (0) ayrıştırma tabloları aşağıdaki gibidir:
eylem tablosu ayrıştırıcı ve ve eylemlerin üç tür içerir (giriş akışı sonunu gösterir özel bir terminali $ dahil) terminalin bir devlet tarafından endeksli:
Goto tablo ayrıştırıcı bir devlet ve bir nonterminal endeksli ve sadece belli bir nonterminal tanıdı ise çözümleyici sonraki devlet ne olacağını işaret etmektedir. Bu tablo, her azalması sonraki devlet öğrenmek önemlidir. Bir azalma sonra, bir sonraki devlet Goto masa yığının en girdisini (yani mevcut durumu) ve azaltılmış kuralın LHS (yani olmayan terminali) bakarak bulundu.
Adımları Ayrıştırma.
Aşağıdaki tablo süreçteki her adımı göstermektedir. Burada devlet yığını (en sağdaki elemanı) üstündeki elemanı ifade eder ve bir sonraki işlem Yukarıdaki eylem tablosuna bakarak belirler. Ayrıca $ akışının sonunu göstermek için giriş dizesi eklenir unutmayın.
Walkthrough.
ayrıştırıcı yığını sadece ilk devlet ('0') içeren başlar:
ayrıştırıcı görür giriş dizesi ilk sembolü '1' olduğunu. (Shift azaltmak, kabul veya hata) sonraki eylem ne olduğunu öğrenmek için, eylem tablo mevcut durumu ile dizine ("mevcut durumu" yığının üstünde sadece ne olduğunu unutmayın) hangi bu durumda, 0, ve '1' olan akım giriş sembolü. Eylem tablo bir devlet 2 vardiya ve böylece devlet 2 tekrar yığının (üzerine itilir, aynı şey yığını üzerine 2. bastırıyor olarak yani "devlet 2 kaydırıyor", tüm devlet bilgisi yığın olduğunu unutmayın belirtir ). Ortaya çıkan yığın
yığının üst açıklama uğruna sembolü 2. olduğu (örneğin, '1', B) kesinlikle onu konuşan yığının parçası olmamasına rağmen, bir sonraki duruma geçiş neden olduğu gösterilmiştir.
Devlet 2 eylem masa doğru ise, bu ayrıştırıcı sadece sağ tarafını kabul anlamına gelir ne olursa olsun ayrıştırıcı girdi akışı üzerinde gördüğü terminal, bu dilbilgisi kuralı 5. bir azalma yapmak gerektiğini söylüyor Gerçekten durum kural 5. 0 durumunda goto tablosundaki hücreden yığınında devleti Bu durumda ayrıştırıcı, çıkış akımına 5 yazar (kuralının sağ tarafı bir sembol beri) yığından tek devlet çıkar ve iter ve B, yani devlet 4. sonuçlanan yığın:
Ancak, devlet 4 aksiyon tablo, ayrıştırıcı şimdi kural 3. Yani çıkış akışı 3 yazar bir azalma yapmalıyım diyor yığından tek devlet çıkar ve devletin 0 ve E için git tablosunda yeni devleti bulur , hangi devlet 3. Ortaya çıkan yığın:
ayrıştırıcı görür sonraki terminal '+' ve bir o zaman devlete 6 gitmeli eylem tabloya göre:
Ortaya çıkan yığın sadece bir terminal '+' ve ardından bir nonterminal E okumuş bir sonlu durum otomat tarihi olarak yorumlanabilir unutmayın. Bu otomat geçiş tablosu eylem tablosunda vardiya eylemleri ve git tablosunda git eylemleri ile tanımlanır.
sonraki terminal şimdi '1' ve bu ayrıştırıcı bir kayma yapar ve devlete 2 gidin demektir:
Önceki '1' bu şu yığını vererek B'ye azalır gibi:
Yine yığını ayrıştırıcı her zaman bir kural 2. Not azaltmak gerçekleştiren devlet 8 bir '+' ve daha sonra bir nonterminal B. tarafından izlenen bir nonterminal E okumuş sonlu otomatın devletlerin listesi ile karşılık geldiğini unutmayın yığının üst 3 devletler kural 2 sağ tarafında 3 sembolleri ile gelmektedir.
Son olarak, çözümleyici eylem tablosuna göre ayrıştırıcı giriş dizesi kabul (mevcut durumu 3'tür) yani giriş akışı, bir '$' (giriş sembolü sonu) okur. sonra çıktı akımına yazılı olacaktır kural numaraları gerçekten ters dize "1 + 1" bir sağdaki türetme 3, 5, 2 olacak.
LR (0) ayrıştırma tabloları oluşturma.
Öğeler.
Özel bir nokta ile gramer kuralları olan bu ayrıştırma tabloların inşaat "LR (0) öğeler" kavramına dayanmaktadır (burada sadece sözde "öğeleri") sağ tarafta yerde ekledi. Örneğin kural E → E + B aşağıdaki dört karşılık gelen öğeler vardır:
Formun Kuralları "A" → ε tek bir öğe "A" → var. Ürünü E → E + B, örneğin, çözümleyici giriş akışı üzerinde E tekabül eden bir dize kabul ettiğini belirtir ve şu anda B ile gelen başka bir dize ardından '+' okumak için bekliyor
Öğe setleri.
Bu o azaltılması için kullanılacak gidiyor kural hangi önceden bilmiyor olabilirsiniz, çünkü bir tek madde ile çözümleyici durumunu karakterize etmek genellikle mümkün değildir. Örneğin, aynı zamanda E ile gelen bir dize okunduktan sonra sonra ürün E → E + B ve E → E * B hem geçerli olacak bir kural E → E * B varsa. Bu nedenle, bu durumda, öğelerin bir dizi ile set {E → E + B, E → E * B} çözümleyici durumunu karakterize etmek uygundur.
Öğe Uzatma olmayan terminaller genişlemesi ile ayarlayın.
Böyle E → E + B gibi bir nonterminal önce noktayla bir öğe, ayrıştırıcı bir sonraki nonterminal B ayrıştırmak için beklediğini gösterir. Madde kümesi tüm olası içeren sağlamak için ayrıştırıcı ayrıştırma ortasında olabilir kuralları, kendisi işlenecek nasıl Yatak açıklayan tüm öğeleri içermelidir. Bu demektir ki gibi kurallar vardır, eğer B → 1 ve B → 0 ise et seti de öğeler içermelidir Yatak → 1 ve aşağıdaki gibi bu formüle edilebilir Genelde B → 0:
Madde kümelerinin kapatılması.
Böylece öğelerin herhangi bir set noktalarla öncesinde tüm Sabit simgeler sorumluydu kadar ardışık tüm uygun öğeleri ekleyerek uzatılabilir. Minimal uzatma set ve clos olarak yazılmış bir öğenin "kapatma" denir ("I") Burada "Ben" set bir öğedir. Aslında başlayacak devletten ulaşılabilir tek olanlar tablolara dahil edilecek rağmen, ayrıştırıcı devletler olarak alınan bu kapalı öğe setleri.
Artırılmış dilbilgisi.
Farklı devletler arasındaki geçişler tespit edilmeden önce, dilbilgisi ekstra kural ile artar
Nerede S yeni bir başlangıç ​​sembolü ve E eski başlangıç ​​sembolüdür. çözümleyici tüm giriş dizesi kabul etti tam olarak ne zaman azaltılması için bu kuralı kullanır.
Bu örnekte, yukarıdaki aynı gramer böylece artar:
Aralarında et setleri ve geçişler belirlenecektir ki bu artırılmış gramer içindir.
Tablo yapımı.
Ulaşılabilir öğe setleri ve aralarındaki geçişleri bulma.
tabloları inşa ilk adım kapalı madde kümeleri arasındaki geçişler belirlenmesi oluşur. Biz terminalleri yanı sıra nonterminal okuyabilirsiniz sonlu otomat düşünüyorsanız gibi bu geçişler tespit edilecektir. S → E: Bu otomat başlayacak devleti daima eklenen kuralın ilk öğenin kapatılması ise:
Bir öğenin önündeki "+" koyu renkte kapatılması için eklenen ürün (bir terminal matematiksel '+' operatörü ile karıştırılmamalıdır) gösterir. madde kümesi "+" denir "kernel" olmadan, özgün öğeler.
Başlamak durumunda (S0) başlayarak, bu durumdan ulaşılabilir devletlerin hepsi şimdi belirlenir. Bir öğe kümesi için olası geçişleri nokta şu Bulunan semboller (terminaller ve Sabit simgeler) bakarak bulunabilir; öğenin durumunda 0, bu semboller terminalleri '0' ve '1' ve öğeyi bulmak için Sabit simgeler E ve B olan set her sembol "x" Aşağıdaki yordam sembollerin her biri için takip edilir, neden olduğu set :
Terminal için '0' (yani burada x = '0') bu sonuçları:
ve terminal '1' (yani burada x = '1') bu sonuçları:
ve nonterminal E (yani burada x = E) bu sonuçları:
ve nonterminal B (yani burada x = B) Bu sonuçları:
Yukarıda yeni setleri, örneğin nokta izleyen Sabit simgeler vardır - kapanması her durumda yeni öğeler eklemek unutmayın. Artık yeni bir öğe setleri bulununcaya kadar bu işlem devam eder. Madde 1, 2 ve 4. setleri için nokta herhangi bir sembolün önünde olmadığından hiçbir geçişler olacak. Madde 3 set için, o nokta terminalleri '*' ve '+' önünde olduğunu unutmayın. '*' Geçiş için gider:
ve '+' geçiş için gider:
Öğe için terminaller '0' ve '1' ve nonterminal B dikkate alınmalıdır, 5 set. Terminaller için zaten bulundu madde sırasıyla 1 ve 2, setleri elde edilen kapalı madde kümeleri eşit olduğunu unutmayın. Nonterminal B geçiş gider:
Öğe için, terminali '0' ve '1' 6 set ve nonterminal B dikkate alınmalıdır. Zaten bulundu madde 1 ve geçiş gider B nonterminal 2. setleri için daha önce olduğu gibi, terminaller için ortaya çıkan madde setleri eşittir:
Bu son madde setleri yüzden artık yeni bir öğe setleri eklenir onların noktalar dışında hiçbir sembolleri var, bu yüzden madde üreten işlemi tamamlanır. kendi devletleri olarak madde setleri ile sonlu otomat, aşağıda gösterilmiştir.
aşağıdaki gibi otomat geçiş tablosu şimdi görünüyor:
Eylem ve git tabloları oluşturulması.
Aşağıdaki gibi bu masa ve buldum öğe kümelerinden, aksiyon ve git tablosu oluşturulmuştur:
Okuyucu bu daha önce sunuldu eylem ve git tabloda gerçekten sonuçları doğrulamak olabilir.
LR hakkında bir not (0) SLR ve LALR ayrıştırma karşı.
Yukarıdaki prosedürün tek adım 4 eylemleri azaltmak üretir ve böylece tüm bakılmaksızın giriş akışı bir sonraki sembolün oluşmasına azalmasına neden bütün bir tablo satırı işgal gereken eylemleri azaltmak unutmayın. Herhangi bir lookahead yapmıyoruz (onlar önde sıfır semboller bakmak olduğunu) gerçekleştirmek için hangi azaltma karar vermeden önce: Bu LR (0) tabloları ayrıştırmak neden budur. Indirim disambiguate lookahead gereken bir gramer farklı sütunlarda farklı azaltmak eylemleri içeren bir ayrıştırma tablo satırı gerektirir ve yukarıdaki prosedür böyle satırları oluşturma yeteneğine sahip değildir.
(Örneğin SLR ve LALR gibi) LR (0) tablo inşaat prosedüre arıtmalar tüm satırları işgal etmez eylemleri azaltmak inşa yeteneğine sahiptirler. Bu nedenle, LR daha (0) ayrıştırıcılar fazla dilbilgisi ayrıştırma özelliğine sahiptir.
Inşa tablolarda Çatışmalar.
otomat bu deterministik olduğu garanti böyle bir şekilde inşa edilmiştir. Ancak, azaltmak eylemleri eylem tabloya eklendiğinde aynı hücre azaltmak eylem ve bir kaydırma hareketiyle dolu olduğunu olabilir (bir "shift-azaltmak çakışma") (a "azaltmak-azaltmak çakışma ya da iki farklı azaltmak eylemleri ile "). Ancak, bu durumda dilbilgisi LR (0) Dilbilgisi olmadığı gösterilebilir. Bir shift-azaltmak çatışma klasik gerçek dünya örneği sarkan başka sorundur.
Bir shift-azaltmak çatışma olmayan bir LR (0) gramer küçük bir örneğidir:
Bulunan madde kümelerinin biri:
Set bu madde ve '1' terminal için eylem tablosunda hücrede çünkü set bu kalemde bir kayma-azaltmak çakışması var 1 durumuna vardiya eylemi ve kural 2 ile azaltmak eylem hem olacak.
Bir azaltmak-azaltmak çatışma olmayan bir LR (0) gramer küçük bir örneğidir:
Bu durumda aşağıdaki madde kümesi elde edilir:
Orada bir azaltmak-azaltmak için bu madde bir azaltmak Kural 3 için eylem ve kural 4 biri de orada olacak set için, çünkü eylem tablosunda hücrelerde belirlenen bu kalemde çatışma.
Yukarıdaki ayrıştırıcı takip setini kullanmasını sağlayarak çözülebilir Her iki örnek de bir azalma "A" lar kurallarından birini kullanmak için gidiyor karar vermek için bir nonterminal "A" (LL çözümleyici bakınız); giriş akışı sonraki sembol "A" takip kümesi ise sadece azaltılması için kural "A" → "w" kullanacaktır. Bu çözelti olarak adlandırılan basit LR ayrıştırıcıları ile sonuçlanır.
